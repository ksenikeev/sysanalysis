#pip install pycryptodome #(pip install pycryptodomex - Windows)
from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256
import binascii

# message as string
msg='{"w11":"0.172664880753","w12":"0.172664880753","w21":"1.651983618736","w22":"1.651983618736","v11":"1.339940667152","v12":"1.339940667152","v13":"1.339940667152","v21":"1.577317714691","v22":"1.577317714691","v23":"1.577317714691","w1":"0.433123469353","w2":"-0.693964779377","w3":"0.422564446926","e":"0.000004499135","publickey":"30820122300D06092A864886F70D01010105000382010F003082010A0282010100ED16E10C43731C931A0F8B6FC7630893F2AD18D5235DA82D2370A7DA0010673F625116760B0171560880B295472B9C0B5C3A3A9B0F92DE0B71BCAC86FA43EF9246E72FA0C192965D9EEAA493C334A43B692C43DD8D675E2B88F15D77374ABE25CA393877E2D1548069AACDA46C35149BB086755B521B1659687BEA4574249F9F4AB569817607F8D68E237CB8DDC39AF7722B08F9D46B8B3CEE8CF755E96B489F429E73BC91BB4CF8A2D86E46A0B599CCD82C5E4F9CAB4EEE20657B32EDCABFB07D6DB618D0C46FA71456ECA23A4739BFB465963D6FA7DECD46FBCEDEB25062B0937F8A46630359AECD7C768588CAF5CDAE4336178BD011BED8B36AAAEB4286230203010001"}'
signature_msg = '3C682C13A6B0B74E69CD56538E27B4974AB1A6983ED2723DF434B2048C91E5F744E90228EAD24FAB0A823A021E4C169729DF8AF5E3AE31913761B0FB315321ACBE9409D0F26F043C32C6F4908A9C2E8B4EA2E1F19A2AF9FB18994CDDD4D0C6C84E6953098903DEA3EE2E1F404EAE42C7E5C58221DDB563F3FF4A4F820CE2F6AB151D2F440BA049ECC88C89D5AF5D5B9566E7B0A3D5D8E533221F7E01A8D50B2DD9E4EAC39E1E2BCF6AE009A2667E7D0F577B97BA0B8D8891BF58FA7FF4890BAD5C4364AD85E9D476A0CCF8F9445B2142A76EC193A67125053BC4B71989C27F9577FDB7F985DC44A8CCCE492A0C1D755762E3F51A123FEEA3EF9DBF2DB73EC288'
public_str = '30820122300D06092A864886F70D01010105000382010F003082010A0282010100ED16E10C43731C931A0F8B6FC7630893F2AD18D5235DA82D2370A7DA0010673F625116760B0171560880B295472B9C0B5C3A3A9B0F92DE0B71BCAC86FA43EF9246E72FA0C192965D9EEAA493C334A43B692C43DD8D675E2B88F15D77374ABE25CA393877E2D1548069AACDA46C35149BB086755B521B1659687BEA4574249F9F4AB569817607F8D68E237CB8DDC39AF7722B08F9D46B8B3CEE8CF755E96B489F429E73BC91BB4CF8A2D86E46A0B599CCD82C5E4F9CAB4EEE20657B32EDCABFB07D6DB618D0C46FA71456ECA23A4739BFB465963D6FA7DECD46FBCEDEB25062B0937F8A46630359AECD7C768588CAF5CDAE4336178BD011BED8B36AAAEB4286230203010001'

# load public key
# convert hex string to bytes
pkey_hex = binascii.unhexlify(public_str)
# make key object from bytes
key = RSA.import_key(pkey_hex)

# new hasher and signer object for RSAwithSHA256 algorithm
hasher = SHA256.new()
signer = pkcs1_15.new(key)

# msg -> hash
hasher.update(bytearray(msg, 'utf-8'))
# sign hash
try:
    signer.verify(hasher, binascii.unhexlify(signature_msg))
except ValueError:
    print('подпись недействительна')